package org.set4j.impl;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Observable;
import java.util.Observer;
import java.util.TreeSet;

import org.set4j.Set4Values;
import org.set4j.Set4JException;

/**
 * @author Tomas Mikenda
 *
 */
public class AttrWrapper 
	// implements Comparable
	extends Observable
	implements Observer
{
	private String mName = null;
	private String mStrippedName = null;
	private String mSysPropName = null;
	private Field mField = null;
	private Method mMethod = null;
	private Object mInstance = null;	// instance is either direct object or proxy with handler
	private ClassHandler mDeclaringHandler = null;
	private TreeSet<String> mDependant = new TreeSet<String>();
	
	public AttrWrapper(Method method, ClassHandler declaringHandler)
    {
	    super();
	    mName = method.getName(); //.substring(3);
	    mMethod = method;
	    mDeclaringHandler = declaringHandler;
    }


	public AttrWrapper(Field field, ClassHandler declaringHandler)
    {
	    super();
	    mName = field.getName();
	    mField = field;
	    mDeclaringHandler = declaringHandler;
    }
	
	//public AttrWrapper()


	public String getName()
    {
    	return mName;
    }
	
	public String getStrippedName()
	{
		if (mStrippedName == null)
		{
			if (mMethod != null)
			{
				String name = mMethod.getName();
				if (name.startsWith("set")) mStrippedName = mMethod.getName().substring(3);
				else if (name.startsWith("get")) mStrippedName = mMethod.getName().substring(3);
				else if (name.startsWith("is")) mStrippedName = mMethod.getName().substring(2);
				// lower? TODO
				mStrippedName = mStrippedName.substring(0, 1).toLowerCase() + mStrippedName.substring(1);
			} else
				// TODO field prefix
				//String name = f.getName().substring(fprefixLen);
				mStrippedName = mName;
		}
		
		return mStrippedName;
	}
	
	protected Class<?> getType()
	{
		if (mField != null) 
			return mField.getType();
		else
			return mMethod.getReturnType();
	}


	/**
     * @param class1
     * @return
     */
    public boolean isAnnotationPresent(Class<? extends Annotation> aClass)
    {
    	if (mField != null) return mField.isAnnotationPresent(aClass);
    	return mMethod.isAnnotationPresent(aClass);
    }


	/**
     * @param class1
     * @return
     */
    public <T extends Annotation>T getAnnotation(Class<T> aClass)
    {
    	if (mField != null) return mField.getAnnotation(aClass);
    	return mMethod.getAnnotation(aClass);
    }
    
	@SuppressWarnings("unchecked")
    public Object convertString2Type(String strValue)
	{
		Object aValue = null;
		Class aFldCls = getType();
		
		try
		{
			
			if (String.class == aFldCls)
			{
				aValue = strValue;
			} else
			if (boolean.class.isAssignableFrom(aFldCls)) // is it boolean?
			{
				aValue = new Boolean(strValue);
			} else
			if (long.class.isAssignableFrom(aFldCls))// || long.class == aFldCls)
			{
				aValue = new Long(strValue);
			} else
			if (int.class.isAssignableFrom(aFldCls))// || int.class == aFldCls)
			{
				aValue = new Integer(strValue);
			} else
			if (aFldCls.isEnum())
			{
				aValue = Enum.valueOf(aFldCls, strValue);
			} else
			{
				throw new Set4JException("Unhandled case! " + aFldCls.toString());
			}
		} 
		catch (Set4JException se)
		{
			throw se;
		}
		catch (Exception e)
		{
			throw new Set4JException("Error assigning value: " + strValue + " to "  + mDeclaringHandler.getClass().getName() + "." + getName() + ": " + e, e);
		}
		return aValue;
	}
	
	public Object getValue()
	{
		try
		{
			if (mField != null)
			{
				mField.setAccessible(true);
	        	return mField.get(getInstance());
			} else
			{
				return mMethod.invoke(getInstance(), (Object[])null);
			}
		} catch (Exception e)
		{
			throw new Set4JException("Internal get invocation error: " + e, e);
		}
			
	}
	public void setValue(String strValue)
	{
		setValue(convertString2Type(strValue));
	}
	public void setValue(Object value)
	{
		// should ensure types? ... will fail anyway
		try
		{
			if (mField != null)
			{
				mField.setAccessible(true);
				mField.set(getInstance(), value);
			} else
			{
				if (Proxy.isProxyClass(mInstance.getClass()) && Proxy.getInvocationHandler(mInstance) instanceof ClassHandler)
				{
					ClassHandler ch = (ClassHandler)Proxy.getInvocationHandler(mInstance);
					ch.setValue(mMethod.getName(), value);
					/*
					//((Proxy)mInstance).getInvocationHandler(proxy)
					InvocationHandler ih = Proxy.getInvocationHandler(mInstance); // handling the case of proxy (interface)
					try
                    {
						//Method mo = Method.class.newInstance();
	                    ih.invoke(mInstance, null, new Object[] {value});
                    } catch (Throwable e)
                    {
	                    //e.printStackTrace();
	                    throw new Set4JException("Internal SET invocation error2: " + e, e);
                    }
					//Method m = Method
					//throw new Set4JException("Internal SET invocation error2: ");
					 */
				} else
				{
					// find setter
					String name = "s" + mMethod.getName().substring(1);
					Class<?> arg = mMethod.getReturnType();
					Method m = getInstance().getClass().getMethod(name, new Class[] { arg });
					m.invoke(getInstance(), new Object[] { value });
				}
			}
		
		} catch (Set4JException e)
		{
			throw e;
		} catch (Exception e)
		{
			throw new Set4JException("Internal SET invocation error: " + e, e);
		}
	}


	public void setInstance(Object instance)
    {
    	mInstance = instance;
    }


	public Object getInstance()
    {
		if (mInstance == null) throw new Set4JException("(internal) object Instance is not set!");
    	return mInstance;
    }


	public ClassHandler getDeclaringHandler()
    {
    	return mDeclaringHandler;
    }

	public void addDependant(String property)
	{
		mDependant.add(property);
	}

	public String getSysPropName()
    {
    	return mSysPropName;
    }


	public void setSysPropName(String sysPropName)
    {
    	mSysPropName = sysPropName;
    }


	@Override
    public String toString()
    {
	    return "AttrWrapper [mName=" + mName + ", mStrippedName=" + mStrippedName 
	    		//+ ", mField=" + mField 
	    		//+ ", mMethod=" + mMethod 
	    		//+ ", mInstance=" + mInstance 
	    		+ "]";
    }


	/* (non-Javadoc)
     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
     */
    public void update(Observable o, Object arg)
    {
	    // TODO FIXME update !!!
	    System.out.println("updated!!! ");
    }


	
	
}
